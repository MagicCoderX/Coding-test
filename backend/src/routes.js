const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const PDFDocument = require("pdfkit");
const fs = require("fs");
const path = require("path");
const { authenticateUser } = require("./middleware");

const router = express.Router();

const users = [
  {
    id: 1,
    username: "John",
    email: "john@example.com",
    password: bcrypt.hashSync("password123", 8),
  },
  {
    id: 2,
    username: "Maxim",
    email: "maxim@example.com",
    password: bcrypt.hashSync("password123", 8),
  },
];

const purchases = [
  {
    id: 1,
    userId: 1,
    title: "Property Inspection Report",
    pdfLink: "http://localhost:5000/api/download-report/1",
    purchase_date: new Date(),
  },
];

const secretKey = "your_secret_key";

router.post("/login", (req, res) => {
  const { email, password } = req.body;
  const user = users.find((u) => u.email === email);
  if (!user) {
    return res.status(404).json({ message: "User not found" });
  }

  const passwordIsValid = bcrypt.compareSync(password, user.password);
  if (!passwordIsValid) {
    return res
      .status(401)
      .json({ accessToken: null, message: "Invalid Password!" });
  }

  const token = jwt.sign({ id: user.id }, secretKey, { expiresIn: 86400 });

  res.status(200).json({ accessToken: token });
});

router.get("/purchase-history", authenticateUser, (req, res) => {
  const userPurchases = purchases.filter((p) => p.userId === req.userId);
  res.status(200).json(userPurchases);
});

router.get("/download-report/:id", authenticateUser, (req, res) => {
  const purchase = purchases.find(
    (p) => p.id === parseInt(req.params.id) && p.userId === req.userId
  );

  if (!purchase) {
    return res
      .status(404)
      .json({ message: "Purchase not found or unauthorized" });
  }

  const user = users.find((u) => u.id === purchase.userId);
  const fileName = `report_${purchase.id}.pdf`;
  const filePath = path.join(__dirname, fileName);

  if (fs.existsSync(filePath)) {
    return res.download(filePath, fileName, (err) => {
      if (err) {
        console.error("Error sending the file:", err);
        return res.status(500).send("Error downloading the file");
      }
    });
  }

  const doc = new PDFDocument();

  const writeStream = fs.createWriteStream(filePath);
  doc.pipe(writeStream);

  doc.fontSize(26).text("Property Inspection Report", { align: "center" });
  doc.moveDown();

  doc.fontSize(14).text(`Purchase ID: ${purchase.id}`);
  doc.text(`Username: ${user.username}`);
  doc.text(
    `Purchase Date: ${purchase.purchase_date.toISOString().split("T")[0]}`
  );
  doc.moveDown();

  doc.fontSize(18).text("Inspection Details", { underline: true });
  doc.moveDown();

  const details = [
    { title: "Condition", description: "Excellent" },
    { title: "Roof", description: "No leaks, in good condition" },
    { title: "Foundation", description: "Stable, no cracks" },
    { title: "Plumbing", description: "All systems functional" },
  ];

  details.forEach((item) => {
    doc.fontSize(12).text(`${item.title}: ${item.description}`);
    doc.moveDown();
  });

  doc.moveDown();
  doc.text("This report is generated by Before You Buy", { align: "center" });
  doc.text(
    "For more information, visit our website: https://www.beforeyoubuy.com.au",
    { align: "center" }
  );

  doc.end();

  writeStream.on("finish", () => {
    res.download(filePath, fileName, (err) => {
      if (err) {
        console.error("Error sending the file:", err);
        return res.status(500).send("Error downloading the file");
      }
    });
  });
});

module.exports = router;
